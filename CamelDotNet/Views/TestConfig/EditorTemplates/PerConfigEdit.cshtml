@model  PerConfigEdit

@{
    string tmp = "";
    if(Model.Delete == true)
    {
        tmp = "display:none";
    }
    string tick = ViewBag.Tick;
}

<div class="PerConfigEdit" style="width:100%;float:left;@tmp">
    @Html.HiddenFor(model => model.Delete, new {@class = "mark-for-delete" })
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.TestItemConfigId)
    <div class="multiAddItem">
        <div class="editor-label">
            @Html.PPLabelFor(m => m.Channel)
        </div>
        <div class="editor-field">
            @Html.EditorFor(m => m.Channel, null, tick + "Channel")
            @Html.ValidationMessageFor(m => m.Channel)
        </div>
    </div>
    <div class="multiAddItem">
        <div class="editor-label">
            @Html.PPLabelFor(m => m.Trace)
        </div>
        <div class="editor-field">
            @Html.EditorFor(m => m.Trace, null, tick + "Trace")
            @Html.ValidationMessageFor(m => m.Trace)
        </div>
    </div>
    <div class="multiAddItem">
        <div class="editor-label">
            @Html.PPLabelFor(model => model.StartF)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.StartF, null, tick + "StartF")
            @Html.ValidationMessageFor(model => model.StartF)
        </div>
    </div>
    <div class="multiAddItem" style="margin-top: 4px; height: 65px;">       
        <div class="editor-label">
            @Html.PPLabelFor(model => model.StartUnitId)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.StartUnitId, new SelectList(Common.GetUnitList(), "Id", "Name"))
            @Html.ValidationMessageFor(model => model.StartUnitId)
        </div>
    </div>
    <div class="multiAddItem">
        <div class="editor-label">
            @Html.PPLabelFor(model => model.StopF)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.StopF, null, tick + "StopF")
            @Html.ValidationMessageFor(model => model.StopF)
        </div>
    </div>
    <div class="multiAddItem" style="margin-top: 4px; height: 65px;">
        <div class="editor-label">
            @Html.PPLabelFor(model => model.StopUnitId)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.StopUnitId, new SelectList(Common.GetUnitList(), "Id", "Name"))
            @Html.ValidationMessageFor(model => model.StopUnitId)
        </div>
    </div>
    <div class="multiAddItem">
        <div class="editor-label">
            @Html.PPLabelFor(model => model.ScanPoint)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ScanPoint, null, tick + "ScanPoint")
            @Html.ValidationMessageFor(model => model.ScanPoint)
        </div>
    </div>
    <div class="multiAddItem">
        <div class="editor-label">
            @Html.PPLabelFor(model => model.ScanTime)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ScanTime, null, tick + "ScanTime")
            @Html.ValidationMessageFor(model => model.ScanTime)
        </div>
    </div>
    <div class="multiAddItem">
        <div class="editor-label">
            @Html.PPLabelFor(model => model.TransportSpeed)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.TransportSpeed, null, tick + "TransportSpeed")
            @Html.ValidationMessageFor(model => model.TransportSpeed)
        </div>
    </div>
    <div class="multiAddItem">
        <div class="editor-label">
            @Html.PPLabelFor(model => model.FreqPoint)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FreqPoint, null, tick + "FreqPoint")
            @Html.ValidationMessageFor(model => model.FreqPoint)
        </div>
    </div>
    <div class="multiAddItem">
        <div class="editor-label">
            @Html.PPLabelFor(model => model.LimitLine)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.LimitLine, null, tick + "LimitLine")
            @Html.ValidationMessageFor(model => model.LimitLine)
        </div>
    </div>
    <div class="multiAddItem">
        <div class="editor-label">
            @Html.PPLabelFor(model => model.LimitLineMax)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.LimitLineMax, null, tick + "LimitLineMax")
            @Html.ValidationMessageFor(model => model.LimitLineMax)
        </div>
    </div>
    <div class="multiAddItem">
        @Html.LinkToRemoveNestedForm("移除指标", "div.PerConfigEdit", "input.mark-for-delete")
    </div>
</div>
